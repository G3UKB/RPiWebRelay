(* 
	webrelay.8th
 
  Simple RPi web relay manager.
 
 Copyright C 2019 by G3UKB Bob Cowdery
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 at your option any later version.
 
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 
  The author can be reached by email at:   
     bob@bobcowdery.plus.com
*)

\ ========================================
\ Testing only
true var, webrelay_test

webrelay_test @ #if
	\ needs debug/sed
	\ true SED-CHECK
	\ needs debug/nicer	
	\ needs debug/trace-crash
	\ needs debug/trace
	\ ( "EXCEPT: " . . cr bye ) w:is handler
#then

\ Define our namespace
ns: webrelay

\ ====================================================================================
\ Vars

\ ====================================================================================
\ Configuration
\ 	- mainmap can have n arrays. We take the channel index pin from each array to energise or de-energise.
\		- mapon (if present) array index 0 is the channels for which we should ALWAYS energise array index 1 pins.
\		- mapoff (if present) array index 0 is the channels for which we should ALWAYS de-energise array index 1 pins.
\		- inverse if true invert the logic i.e. a logic 1 turns the device attached to the channel off.
\		- exclusive if true when energising turn all other channels to the off state before energising the given channel.

\ Called from any task. Only store config locally!
: lpf_pinmap	\ --
	{
		"name" : "LPF",
		"numchannels" : 6,
		"mainmap" : [[27,22,5,6,13,26],[18,23,24,25,12,16]],
		"mapon" : [[4,5,6],[4,17]],
		"inverse" : true,
		"exclusive" : true
	}
;

: ports_pinmap	\ --
	{
		"name" : "Ports",
		"numchannels" : 4,
		"mainmap" : [[4,17,27,22]],
		"inverse" : false,
		"exclusive" : true
	}
;

: power_pinmap	\ --
	{
		"name" : "Power",
		"numchannels" : 8,
		"mainmap" : [[2,3,4,17,27,22,10,9]],
		"inverse" : true,
		"exclusive" : true
	}
;

\ ========================================
\ Get pinmap map for given name
: get_pinmap \ name -- pinmap
	{ "lpf" : ' lpf_pinmap , "ports" : ' ports_pinmap , "power" : ' power_pinmap }
	swap caseof
;

\ ===============================================================================
\ The GPIO interface runs as a separate task
\ The following words must only be called from the GPIO interface task!

\ ====================================================================================
\ Accessors for pinmap and gpiomap

\ ========================================
\ Pin map
: pinmap	\ -- pinmap
		"pinmap" t:@
;

\ ========================================
\ Pin map main map
: pinmap_mainmap	\ -- pinmap
		pinmap "mainmap" m:@ nip
;

\ ========================================
\ Pins for channel in main map
: collect_channel	\ array channel pinmap -- array channel
	swap >r r@ a:@			\ array pinmap value
	rot swap a:push swap drop r>
;

: pinmap_mainmap_for_channel	\ channel -- pinmap_mainmap_for_channel
	n:1- a:new swap pinmap_mainmap ' collect_channel a:each!
	2drop
;

\ ========================================
\ Pin map 'on' map
: pinmap_onmap	\ -- on-map
		pinmap "mapon" m:exists? if "mapon" m:@ else null then nip
;

\ ========================================
\ Pin map 'on' pins
: pinmap_onmap_pins	\ -- on-map-pins | null
		pinmap_onmap null? if null
		else 1 a:@ nip then
;

\ ========================================
\ Pin map 'on' channels
: pinmap_onmap_ch	\ -- on-map-ch | null
		pinmap_onmap null? if null
		else 0 a:@ nip then
;

\ ========================================
\ Pin map 'off' map
: pinmap_offmap	\ -- off-map | null
		pinmap "mapoff" m:exists? if "mapoff" m:@ else null then nip
;

\ ========================================
\ Pin map 'off' pins
: pinmap_offmap_pins	\ -- off-map-pins | null
		pinmap_offmap null? if drop null
		else 1 a:@ nip then
;

\ ========================================
\ Pin map 'off' channels
: pinmap_offmap_ch	\ -- off-map-ch | null
		pinmap_offmap null? if null
		else 0 a:@ nip then
;

\ ========================================
\ Pin map inverse
: pinmap_inverse	\ -- pinmap-inverse
		pinmap "inverse" m:@ nip
;

\ ========================================
\ Pin map exclusive
: pinmap_exclusive	\ -- pinmap-exclusive
		pinmap "exclusive" m:@ nip
;

\ ========================================
\ GPIO map
: gpiomap	\ -- gpiomap
		"gpiomap" t:@
;

\ ========================================
\ GPIO inst
: gpiomap_inst	\ channel -- gpiomap-inst
		gpiomap swap m:@ nip 
;

\ ====================================================================================
\ Writers

\ ========================================
\ Low level write
: writer	\ pin state --
	hw:arm? if
		\ Real hardware
		swap gpiomap_inst swap hw:gpio!
	else
		\ Simulation
		if 1 else 0 then
		swap "Channel %d set to %d" s:strfmt log
	then
;

\ ========================================
\ Write value to GPIO/Sim according to spec
: write_pin	\ pin energise
	if
		\ State 'on'
		pinmap_inverse if false writer else true writer then
	else
		\ State 'off'
		pinmap_inverse if true writer else false writer then
	then
;

\ ========================================
\ Write all values for the given channel
: write_all	\ channel energise --
		\ Retrieve main pinmap and process each pin array
		swap pinmap_mainmap_for_channel ' write_pin a:each! drop
		
		
		\ Retrieve ancilliary pinmaps and process the pin array
		pinmap_onmap_pins null? not if ' write_pin a:each! then drop
		pinmap_offmap_pins null? not if ' write_pin a:each! then drop
;

\ ====================================================================================
\ Initialisation

\ ========================================
: init_pin	\ pin --
	hw:arm? if
		\ If running on ARM hardware create a gpio instance
		\ and store in the gpiomap at key = pin
		"gpiomap" t:@ swap false hw:gpio m:! drop false write_pin
	else
		\ Simulation
		"gpiomap" t:@ 1 pick null m:! drop false write_pin
	then
;

\ ========================================
: init_pins	\ pin-array --
	' init_pin a:each! drop
;

\ ========================================
\ Pin initialisation
: init_all 	\ --
	\ Retrieve main pinmap and process each pin array
	pinmap_mainmap ' init_pins a:each! drop
	\ Retrieve ancilliary pinmaps and process the pin array
	pinmap_onmap_pins null? not if ' init_pin a:each! then drop
	pinmap_offmap_pins null? not if ' init_pin a:each! then drop
;

\ ===============================================================================
\ Execution words
\ ToDo: Why does each execution word add 0 to the stack when not even called.
\========================================
\ Quit
: do_quit \ _ -- f
	drop true
;

\========================================
\ Energise pin
: do_on	\ channel -- f
	true write_all
;

\========================================
\ Deenergise pin
: do_off	\ channel -- f
	false write_all
;

\========================================
\ Message process
: msg_pump	\ --
	\ Process requests until quit message
	repeat
		\ Wait for work
		-1 t:q-wait
		t:pop null? if
			"Got null from Q!" log
		else
			a:open swap \ channel cmd
			\ Execute the command
			{ "quit" : ( do_quit ) , "on" : ( do_on ) , "off" : ( do_off ) }
			swap caseof if break then	
		then
	again
;

\ ===============================================================================
\ The GPIO task word

\ ========================================
\ The task entry point
: GPIO_interface	\ module-type --
	\ Set task name and prevent throwing on q empty
	"GPIO-Interface" t:name!
	getq false q:throwing drop
	cr "GPIO_interface task waiting for requests..." . cr
	\ Retrieve our configuration, save to task var
	get_pinmap "pinmap" t:!
	\ Create a map to hold the gpio instances, save to task var
	m:new "gpiomap" t:!
	\ Initialise interface
	init_all
	\ Process requests
	msg_pump
	cr "GPIO_interface task exiting..." .
;

\ ========================================
\ Reset namespace
ns: user

\ ===============================================================================
\ ====================================================================================
\ Testing

webrelay_test @ #if
	ns: webrelay
	\ ========================================
	\ Test accessors
	\ Pin map
	"Test accessors..." . cr
	"lpf" get_pinmap "pinmap" t:! drop
	pinmap . cr
	pinmap_mainmap . cr
	4 pinmap_mainmap_for_channel . cr
	pinmap_onmap . cr
	pinmap_onmap_pins . cr
	pinmap_onmap_ch . cr
	pinmap_offmap . cr
	pinmap_offmap_pins . cr
	pinmap_offmap_ch . cr
	pinmap_inverse . cr
	pinmap_exclusive . cr

	\ GPIO map
	"Test GPIO map" . cr
	{"1" : "Inst-1", "2" : "Inst-2" } "gpiomap" t:! drop
	gpiomap . cr
	"1" gpiomap_inst . cr
	"2" gpiomap_inst . cr

	\ ========================================
	\ Test writers
	"Test writers" . cr
	1 true basic_write cr
	1 false basic_write cr

	\ ========================================
	\ Test simulation
	"Test simulation" . cr
	"lpf" 1 ' GPIO_interface t:task-n
	2 sleep
	dup ["quit", null] t:push t:q-notify
	1 sleep

	bye
#then

