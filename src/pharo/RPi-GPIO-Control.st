PackageManifest subclass: #ManifestRPiGPIOControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-Manifest'!!ManifestRPiGPIOControl commentStamp: 'BobCowdery 9/13/2019 16:59' prior: 0!Driver for RPi GPIO pins which may control relays etc.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestRPiGPIOControl class	instanceVariableNames: ''!!ManifestRPiGPIOControl class methodsFor: 'code-critics' stamp: 'BobCowdery 9/16/2019 16:57'!ruleRBCodeCruftLeftInMethodsRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#RPiGPIOSim #write: #false)) #'2019-09-16T16:57:36.329146+01:00') )! !!ManifestRPiGPIOControl class methodsFor: 'code-critics' stamp: 'BobCowdery 9/16/2019 15:55'!ruleRBSendsUnknownMessageToGlobalRuleV1FalsePositive	^ #(#(#(#RGMethodDefinition #(#RPiGPIOSim #write: #false)) #'2019-09-16T15:55:38.676146+01:00') )! !Object subclass: #RPiGPIOHW	instanceVariableNames: 'pinid pinmode pininverse gpioinst'	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-ServerSide'!!RPiGPIOHW commentStamp: 'BobCowdery 9/16/2019 20:56' prior: 0!Class  Low level GPIO access.Responsibility: Encapsulate the GPIO instances for the set of required pins.Collaborators: Uses PotGPIOPublic API and Key MessagesInternal Representation and Key Implementation Points.    Implementation Points!!RPiGPIOHW methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 10:02'!initialize: thisid as: thismode inverse: thisinverse	"Context for this instance"	| |	"Create instance of the GPIO lib"	gpioinst := PotGPIO new.		pinid := thisid.	pinmode := thismode.	pininverse := thisinverse.		gpioinst id: pinid.	(pinmode = #input)	 	ifTrue: [gpioinst board: RpiBoard3B current; beDigitalInput]		ifFalse: [gpioinst board: RpiBoard3B current; beDigitalOutput].! !!RPiGPIOHW methodsFor: 'operation' stamp: 'BobCowdery 9/17/2019 10:07'!write: state	"Turn the digital GPIO pin on or off"	| |	(pininverse)		ifTrue: [gpioinst writeDigitalValue: (state not)]		ifFalse: [gpioinst writeDigitalValue: state].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RPiGPIOHW class	instanceVariableNames: ''!!RPiGPIOHW class methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 10:09'!newInst: thisid as: thismode inverse: thisinverse	"Create a new instance of RPiGPIOHW"	|inst|	inst := self new.	inst initialize: thisid as: thismode inverse: thisinverse.	^ inst.! !!RPiGPIOHW class methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 09:23'!newInst: thisid as: thismode	"Create a new instance of RPiGPIOHW"	|inst|	inst := self new.	inst initialize: thisid as: thismode.	^ inst.! !Object subclass: #RPiGPIOSim	instanceVariableNames: 'pinid pinmode pininverse'	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-ServerSide'!!RPiGPIOSim commentStamp: 'BobCowdery 9/16/2019 15:09' prior: 0!A simulator for GPIO testing on a non-GPIO computer.!!RPiGPIOSim methodsFor: 'operation' stamp: 'BobCowdery 9/17/2019 10:03'!write: state	"Turn the simulated digital GPIO pin on or off"	||		Transcript show: pinid.	Transcript show: ':'.	Transcript show: pininverse.	Transcript show: ':'.	Transcript show: state; cr.	! !!RPiGPIOSim methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 10:03'!initialize: thisid as: thismode inverse: thisinverse	"Context for this instance"	||	pinid := thisid.	pinmode := thismode.	pininverse := thisinverse.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RPiGPIOSim class	instanceVariableNames: ''!!RPiGPIOSim class methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 10:09'!newInst: thisid as: thismode inverse: thisinverse	"Create a new instance of RPiGPIOSim"	|inst|	inst := self new.	inst initialize: thisid as: thismode inverse: thisinverse.	^ inst.! !!RPiGPIOSim class methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 09:18'!newInst: thisid as: thismode	"Create a new instance of RPiGPIOSim"	|inst|	inst := self new.	inst initialize: thisid as: thismode.	^ inst.! !Object subclass: #RPiRelay	instanceVariableNames: 'pinmap gpiomap testing'	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-ServerSide'!!RPiRelay commentStamp: 'BobCowdery 9/14/2019 15:47' prior: 0!Class  Manage remote relay activation using GPIO pins and suitable hardware.Responsibility: Relay activation according to the configuration maps.Collaborators: Uses RPiGPIOPublic API and Key MessagesInternal Representation and Key Implementation Points.    Implementation Points!!RPiRelay methodsFor: 'initialize' stamp: 'BobCowdery 9/17/2019 10:11'!addInstance: pins inverse: asinverse	"Make a new RPiGPIOx instance and add to the instance map"	| |	pins do: [ :pin |		(testing)			ifTrue: [gpiomap at: pin put: (RPiGPIOSim newInst: pin as: #output inverse: asinverse)]			ifFalse: [gpiomap at: pin put: (RPiGPIOHW newInst: pin as: #output inverse: asinverse)].	]	! !!RPiRelay methodsFor: 'initialize' stamp: 'BobCowdery 9/17/2019 10:16'!initialize: target	"Initialize GPIO relay manager with the target type"	|pins|	"Set true for testing"	testing := true.		" Get target configuration"	(target = 'LPF')		ifTrue: [self configRelaysLPF].	(target = 'Power')		ifTrue: [self configRelaysPower].	(target = 'Port')		ifTrue: [self configRelaysPorts].	"Create instances of the GPIO class"	"A map to add the instances into as (pinid, inst)"	gpiomap := Dictionary new.	"Get the map(s) for the configuration"	pins := pinmap at: #mainmap.	pins do: [ :each | self addInstance: each inverse: (pinmap at: #inverse)].	pinmap at: #mapon ifPresent: [ 		self addInstance: ((pinmap at: #mapon) at: 2) inverse: (pinmap at: #inverse)].	pinmap at: #mapoff ifPresent: [ 		self addInstance: ((pinmap at: #mapoff) at: 2) inverse: (pinmap at: #inverse)].	"Initialse all relays to deactivated"	gpiomap do: [ :inst | inst write: false].! !!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/16/2019 14:09'!configRelaysLPF	"Configuration data for LPF relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: 'Low Pass Filters'.	pinmap at: #numchannels put: 6.	" For each channel we activate the channel number pin of each array"	pinmap at: #mainmap put: #(#(27 22 5 6 13 26) #(18 23 24 25 12 16)).	"In addition we activate the pins in the second array iff the channel 	appears in the first array. That is if channel 1 is activated, do nothing,	if channel 4 is activated activate pins 4 and 17."	pinmap at: #mapon put: #((4 5 6) #(4 17)).	pinmap at: #inverse put: true.	! !!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/16/2019 14:10'!configRelaysPower	"Configuration data for 5v power relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: '5v Power Switch'.	pinmap at: #numchannels put: 8.	pinmap at: #mainmap put: #(2 3 4 17 27 22 10 9).	pinmap at: #inverse put: true.	! !!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/16/2019 14:10'!configRelaysPorts	"Configuration data for RF Port relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: '5v Power Switch'.	pinmap at: #numchannels put: 4.	pinmap at: #mainmap put: #(4 17 27 22).	pinmap at: #inverse put: false.	! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 11:36'!deactivateChannel: channel using: config	"Deactivate the given channel"	| |	"Deactivate from main map"	(config at: #mainmap) do: [ :spec | self deactivateChannel: channel from: spec ].		! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 17:04'!deactivateChannel: channel from: spec	"Deactivate a single channel from the specification array"	| |	(gpiomap at: (spec at: channel)) write: false.! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 19:04'!activateChannel: channel using: config	"Activate the given channel"	| |	"Activate from config"	(config at: #mainmap) do: [ :spec | self activateChannel: channel from: spec ].	" See if we have additional maps"	config at: #mapon ifPresent: [ 		"We need to activate the relays in element 2 iff element 1 contains our channel"		(((config at: #mapon) at: 1) includes: channel) ifTrue: [ 			((config at: #mapon) at: 2) do: [ :pin | self activatePin: pin ]. 		] ifFalse: [ 			((config at: #mapon) at: 2) do: [ :pin | self deactivatePin: pin ].		]	].	config at: #mapoff ifPresent: [ 		"We need to deactivate the relays in element 2 iff element 1 contains our channel"		(((config at: #mapoff) at: 1) includes: channel) ifTrue: [ 			((config at: #mapoff) at: 2) do: [ :pin | self deactivatePin: pin ].		] ifFalse: [ 			((config at: #mapoff) at: 2) do: [ :pin | self activatePin: pin ]. 		]	].! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/17/2019 09:57'!deactivateAll: specification	"Deactivate all relays in the specification"	| |	"We retrieve the RPiGPIO instance for the pin and deactivate the pin"	specification do: [ :pin | (gpiomap at: pin) write: false ].	! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 17:34'!activateChannel: channel from: spec	"Activate the specified channel from the specification"	| |	(gpiomap at: (spec at: channel)) write: true.! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 18:40'!activatePin: pin	"Activate the specified pin"	| |	(gpiomap at: pin) write: true.! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 18:41'!deactivatePin: pin	"Deactivate the specified pin"	| |	(gpiomap at: pin) write: false.! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 18:48'!deactivateChannel: channel	"Deactivate the specified channel"	| |	(gpiomap at: channel) write: false.! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 16:05'!setChannel: channel to: state with: exclusive	"A channel may be several relays according to the configuration.	If exclusive then all other channels must be deactivated if this is	a channel activation"	| |	(state)	ifTrue: [ 		"Channel activation" 		(exclusive)		ifTrue: [			"Only allow one active channel so turn off all channels"			(pinmap at: #mainmap) do: [ :spec | self deactivateAll: spec ]].		"Activate the given channel"		self activateChannel: channel using: pinmap]	ifFalse: [ 		"Deactivate the given channel"		self deactivateChannel: channel using: pinmap].	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RPiRelay class	instanceVariableNames: ''!!RPiRelay class methodsFor: 'initialization' stamp: 'BobCowdery 9/17/2019 08:35'!newInst: target	"Create a new instance of the RPiRelay class"	|inst|	inst := self new.	inst initialize: target.	^ inst.	! !