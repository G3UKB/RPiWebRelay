PackageManifest subclass: #ManifestRPiGPIOControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-Manifest'!!ManifestRPiGPIOControl commentStamp: 'BobCowdery 9/13/2019 16:59' prior: 0!Driver for RPi GPIO pins which may control relays etc.!Object subclass: #RPiGPIO	instanceVariableNames: 'gpioinst instid'	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-ServerSide'!!RPiGPIO commentStamp: 'BobCowdery 9/14/2019 15:45' prior: 0!Class  Low level GPIO access.Responsibility: Encapsulate the GPIO instances for the set of required pins.Collaborators: Uses PotGPIOPublic API and Key MessagesInternal Representation and Key Implementation Points.    Implementation Points!!RPiGPIO methodsFor: 'initialization' stamp: 'BobCowdery 9/14/2019 17:46'!initialize: id as: mode	"comment stating purpose of message"	| |	gpioinst := PotGPIO new.	gpioinst id: id.	mode == #input	 	ifTrue: [gpioinst board: RpiBoard3B current; beDigitalInput]		ifFalse: [gpioinst board: RpiBoard3B current; beDigitalOutput].	! !!RPiGPIO methodsFor: 'acccessing' stamp: 'BobCowdery 9/14/2019 13:50'!instid	"Return the GPIO pin id"	| |	^ instid.	! !!RPiGPIO methodsFor: 'acccessing' stamp: 'BobCowdery 9/14/2019 13:52'!gpioinst	"comment stating purpose of message"	||	^gpioinst.	! !!RPiGPIO methodsFor: 'operation' stamp: 'BobCowdery 9/14/2019 16:10'!write: state	"Turn the digital GPIO pin on or off"	| |	gpioinst writeDigitalValue: state	! !Object subclass: #RPiRelay	instanceVariableNames: 'pinmap gpioinst gpiomap'	classVariableNames: ''	poolDictionaries: ''	category: 'RPi-GPIO-Control-ServerSide'!!RPiRelay commentStamp: 'BobCowdery 9/14/2019 15:47' prior: 0!Class  Manage remote relay activation using GPIO pins and suitable hardware.Responsibility: Relay activation according to the configuration maps.Collaborators: Uses RPiGPIOPublic API and Key MessagesInternal Representation and Key Implementation Points.    Implementation Points!!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/15/2019 09:43'!configRelaysLPF	"Configuration data for LPF relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: 'Low Pass Filters'.	pinmap at: #numchannels put: 6.	" For each channel we activate the channel number pin of each array"	pinmap at: #mainmap put: #(#(27 22 5 6 13 26) #(18 23 24 25 12 16)).	"In addition we activate the pins in the second array iff the channel 	appears in the first array. That is if channel 1 is activated, do nothing,	if channel 4 is activated activate pins 4 and 17."	pinmap at: #mapon put: #((4 5 6) #(4 17)).	pinmap at: #inverse put: true.	^pinmap	! !!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/15/2019 09:43'!configRelaysPower	"Configuration data for 5v power relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: '5v Power Switch'.	pinmap at: #numchannels put: 8.	pinmap at: #mainmap put: #(2 3 4 17 27 22 10 9).	pinmap at: #inverse put: true.	^pinmap	! !!RPiRelay methodsFor: 'configuration' stamp: 'BobCowdery 9/15/2019 09:43'!configRelaysPorts	"Configuration data for RF Port relay activation"	| |	pinmap := Dictionary new.	pinmap at: #name put: '5v Power Switch'.	pinmap at: #numchannels put: 4.	pinmap at: #mainmap put: #(4 17 27 22).	pinmap at: #inverse put: false.	^pinmap	! !!RPiRelay methodsFor: 'acccessing' stamp: 'BobCowdery 9/13/2019 17:33'!pinmap	"comment stating purpose of message"	| |	^ pinmap! !!RPiRelay methodsFor: 'initialize' stamp: 'BobCowdery 9/14/2019 17:45'!initialize: target	"Initialize GPIO relay manager with the target type"	|pins|	" Get target configuration"	(target = 'LPF')		ifTrue: [self configRelaysLPF].	(target = 'Power')		ifTrue: [self configRelaysPower].	(target = 'Port')		ifTrue: [self configRelaysPorts].	"Create instances of the GPIO class"	"A map to add tyhe instances into as (pinid, inst)"	gpiomap := Dictionary new.	"Get the map(s) for the configuration"	pins := pinmap at: #mainmap.	pins do: [ :each | self addInstance: each ].		! !!RPiRelay methodsFor: 'initialize' stamp: 'BobCowdery 9/14/2019 17:36'!addInstance: pins	"Make a new RPiGPIO instance and add to the instance map"	| |	pins do: [ :pin |		gpiomap at: pin put: (RPiGPIO new initialize: pin as: #output)	].! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/15/2019 17:24'!deactivateChannel: channel from: spec	"Deactivate a single channel from the specification array"	| |	spec do: [ :pin | (gpiomap at: pin) write: 0 ].! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/15/2019 16:03'!deactivateAll: specification	"Deactivate all relays in the specification"	| |	"We retrieve the RPiGPIO instance for the pin and deactivate the pin"	specification do: [ :pin | (gpiomap at: pin) write: 0 ].	! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 11:35'!activateChannel: channel using: config	"Activate the given channel"	| |	"Activate from config"	(config at: #mainmap) do: [ :spec | self activateChannel: channel from: spec ].	" See if we have additional maps"	(config includes: #mapon) ifTrue: [ 		"We need to activate the relays in element 2 iff element 1 contains our channel"		(((config at: #mapon) at: 1) includes: channel) ifTrue: [ 			((config at: #mapon) at: 1) do: [ :spec | self activateChannel: channel from: spec ]. 		] ifFalse: [ 			((config at: #mapon) at: 1) do: [ :spec | self deactivateChannel: channel from: spec ]. 		]	].	(config includes: #mapoff) ifTrue: [ 		"We need to deactivate the relays in element 2 iff element 1 contains our channel"		(((config at: #mapoff) at: 1) includes: channel) ifTrue: [ 			((config at: #mapoff) at: 1) do: [ :spec | self deactivateChannel: channel from: spec ]. 		] ifFalse: [ 			((config at: #mapoff) at: 1) do: [ :spec | self activateChannel: channel from: spec ]. 		]	].! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/16/2019 11:36'!deactivateChannel: channel using: config	"Deactivate the given channel"	| |	"Deactivate from main map"	(config at: #mainmap) do: [ :spec | self deactivateChannel: channel from: spec ].		! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/15/2019 14:33'!setChannel: channel using: config to: state with: exclusive	"A channel may be several relays according to the configuration.	If exclusive then all other channels must be deactivated if this is	a channel activation"	| |	(state)	ifTrue: [ 		"Channel activation" 		(exclusive)		ifTrue: [			"Only allow one active channel so turn off all channels"			(config at: #mainmap) do: [ :spec | self deactivateAll: spec ]].		"Activate the given channel"		self activateChannel: channel using: config]	ifFalse: [ 		"Deactivate the given channel"		self deactivateChannel: channel using: config].	! !!RPiRelay methodsFor: 'operation' stamp: 'BobCowdery 9/15/2019 17:56'!activateChannel: channel from: spec	"Activate the specified channel from the specification"	| |	spec do: [ :pin | (gpiomap at: pin) write: 1 ].! !